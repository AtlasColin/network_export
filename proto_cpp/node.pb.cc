// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "node.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class XZY_NodeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<XZY_Node>
     _instance;
  const ::XZY_BatchNormalizationParam* batch_normalization_param_;
  const ::XZY_ConvolutionParam* convolution_param_;
  const ::XZY_FullyConnectedParam* fully_connected_param_;
  const ::XZY_MaxPoolingParam* max_pooling_param_;
  const ::XZY_SeparableConvolutionParams* separable_convolution_param_;
} _XZY_Node_default_instance_;

namespace protobuf_node_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XZY_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XZY_Node, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XZY_Node, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XZY_Node, input_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XZY_Node, input_shapes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XZY_Node, output_shape_),
  offsetof(XZY_NodeDefaultTypeInternal, batch_normalization_param_),
  offsetof(XZY_NodeDefaultTypeInternal, convolution_param_),
  offsetof(XZY_NodeDefaultTypeInternal, fully_connected_param_),
  offsetof(XZY_NodeDefaultTypeInternal, max_pooling_param_),
  offsetof(XZY_NodeDefaultTypeInternal, separable_convolution_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XZY_Node, param_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(XZY_Node)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_XZY_Node_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "node.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_shape_2eproto::InitDefaults();
  ::protobuf_batch_5fnorm_5fparam_2eproto::InitDefaults();
  ::protobuf_conv_5fparam_2eproto::InitDefaults();
  ::protobuf_fully_5fconnected_5fparam_2eproto::InitDefaults();
  ::protobuf_max_5fpooling_5fparam_2eproto::InitDefaults();
  ::protobuf_separable_5fconvolution_5fparam_2eproto::InitDefaults();
  _XZY_Node_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_XZY_Node_default_instance_);_XZY_Node_default_instance_._instance.get_mutable()->output_shape_ = const_cast< ::XZY_Shape*>(
      ::XZY_Shape::internal_default_instance());
  _XZY_Node_default_instance_.batch_normalization_param_ = const_cast< ::XZY_BatchNormalizationParam*>(
      ::XZY_BatchNormalizationParam::internal_default_instance());
  _XZY_Node_default_instance_.convolution_param_ = const_cast< ::XZY_ConvolutionParam*>(
      ::XZY_ConvolutionParam::internal_default_instance());
  _XZY_Node_default_instance_.fully_connected_param_ = const_cast< ::XZY_FullyConnectedParam*>(
      ::XZY_FullyConnectedParam::internal_default_instance());
  _XZY_Node_default_instance_.max_pooling_param_ = const_cast< ::XZY_MaxPoolingParam*>(
      ::XZY_MaxPoolingParam::internal_default_instance());
  _XZY_Node_default_instance_.separable_convolution_param_ = const_cast< ::XZY_SeparableConvolutionParams*>(
      ::XZY_SeparableConvolutionParams::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nnode.proto\032\013shape.proto\032\026batch_norm_pa"
      "ram.proto\032\020conv_param.proto\032\033fully_conne"
      "cted_param.proto\032\027max_pooling_param.prot"
      "o\032!separable_convolution_param.proto\"\247\003\n"
      "\010XZY_Node\022\014\n\004name\030\001 \001(\t\022\023\n\013input_names\030\002"
      " \003(\t\022 \n\014input_shapes\030\003 \003(\0132\n.XZY_Shape\022 "
      "\n\014output_shape\030\004 \001(\0132\n.XZY_Shape\022A\n\031batc"
      "h_normalization_param\030\005 \001(\0132\034.XZY_BatchN"
      "ormalizationParamH\000\0222\n\021convolution_param"
      "\030\006 \001(\0132\025.XZY_ConvolutionParamH\000\0229\n\025fully"
      "_connected_param\030\007 \001(\0132\030.XZY_FullyConnec"
      "tedParamH\000\0221\n\021max_pooling_param\030\010 \001(\0132\024."
      "XZY_MaxPoolingParamH\000\022F\n\033separable_convo"
      "lution_param\030\t \001(\0132\037.XZY_SeparableConvol"
      "utionParamsH\000B\007\n\005paramb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "node.proto", &protobuf_RegisterTypes);
  ::protobuf_shape_2eproto::AddDescriptors();
  ::protobuf_batch_5fnorm_5fparam_2eproto::AddDescriptors();
  ::protobuf_conv_5fparam_2eproto::AddDescriptors();
  ::protobuf_fully_5fconnected_5fparam_2eproto::AddDescriptors();
  ::protobuf_max_5fpooling_5fparam_2eproto::AddDescriptors();
  ::protobuf_separable_5fconvolution_5fparam_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_node_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XZY_Node::kNameFieldNumber;
const int XZY_Node::kInputNamesFieldNumber;
const int XZY_Node::kInputShapesFieldNumber;
const int XZY_Node::kOutputShapeFieldNumber;
const int XZY_Node::kBatchNormalizationParamFieldNumber;
const int XZY_Node::kConvolutionParamFieldNumber;
const int XZY_Node::kFullyConnectedParamFieldNumber;
const int XZY_Node::kMaxPoolingParamFieldNumber;
const int XZY_Node::kSeparableConvolutionParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XZY_Node::XZY_Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_node_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XZY_Node)
}
XZY_Node::XZY_Node(const XZY_Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      input_names_(from.input_names_),
      input_shapes_(from.input_shapes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_output_shape()) {
    output_shape_ = new ::XZY_Shape(*from.output_shape_);
  } else {
    output_shape_ = NULL;
  }
  clear_has_param();
  switch (from.param_case()) {
    case kBatchNormalizationParam: {
      mutable_batch_normalization_param()->::XZY_BatchNormalizationParam::MergeFrom(from.batch_normalization_param());
      break;
    }
    case kConvolutionParam: {
      mutable_convolution_param()->::XZY_ConvolutionParam::MergeFrom(from.convolution_param());
      break;
    }
    case kFullyConnectedParam: {
      mutable_fully_connected_param()->::XZY_FullyConnectedParam::MergeFrom(from.fully_connected_param());
      break;
    }
    case kMaxPoolingParam: {
      mutable_max_pooling_param()->::XZY_MaxPoolingParam::MergeFrom(from.max_pooling_param());
      break;
    }
    case kSeparableConvolutionParam: {
      mutable_separable_convolution_param()->::XZY_SeparableConvolutionParams::MergeFrom(from.separable_convolution_param());
      break;
    }
    case PARAM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:XZY_Node)
}

void XZY_Node::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_shape_ = NULL;
  clear_has_param();
  _cached_size_ = 0;
}

XZY_Node::~XZY_Node() {
  // @@protoc_insertion_point(destructor:XZY_Node)
  SharedDtor();
}

void XZY_Node::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete output_shape_;
  if (has_param()) {
    clear_param();
  }
}

void XZY_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XZY_Node::descriptor() {
  protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XZY_Node& XZY_Node::default_instance() {
  protobuf_node_2eproto::InitDefaults();
  return *internal_default_instance();
}

XZY_Node* XZY_Node::New(::google::protobuf::Arena* arena) const {
  XZY_Node* n = new XZY_Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XZY_Node::clear_param() {
// @@protoc_insertion_point(one_of_clear_start:XZY_Node)
  switch (param_case()) {
    case kBatchNormalizationParam: {
      delete param_.batch_normalization_param_;
      break;
    }
    case kConvolutionParam: {
      delete param_.convolution_param_;
      break;
    }
    case kFullyConnectedParam: {
      delete param_.fully_connected_param_;
      break;
    }
    case kMaxPoolingParam: {
      delete param_.max_pooling_param_;
      break;
    }
    case kSeparableConvolutionParam: {
      delete param_.separable_convolution_param_;
      break;
    }
    case PARAM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAM_NOT_SET;
}


void XZY_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:XZY_Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_names_.Clear();
  input_shapes_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && output_shape_ != NULL) {
    delete output_shape_;
  }
  output_shape_ = NULL;
  clear_param();
  _internal_metadata_.Clear();
}

bool XZY_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XZY_Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XZY_Node.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string input_names = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_names(this->input_names_size() - 1).data(),
            static_cast<int>(this->input_names(this->input_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XZY_Node.input_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XZY_Shape input_shapes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input_shapes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XZY_Shape output_shape = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XZY_BatchNormalizationParam batch_normalization_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch_normalization_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XZY_ConvolutionParam convolution_param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XZY_FullyConnectedParam fully_connected_param = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fully_connected_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XZY_MaxPoolingParam max_pooling_param = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_pooling_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XZY_SeparableConvolutionParams separable_convolution_param = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_separable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XZY_Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XZY_Node)
  return false;
#undef DO_
}

void XZY_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XZY_Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XZY_Node.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string input_names = 2;
  for (int i = 0, n = this->input_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_names(i).data(), static_cast<int>(this->input_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XZY_Node.input_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->input_names(i), output);
  }

  // repeated .XZY_Shape input_shapes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_shapes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->input_shapes(static_cast<int>(i)), output);
  }

  // .XZY_Shape output_shape = 4;
  if (this->has_output_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->output_shape_, output);
  }

  // .XZY_BatchNormalizationParam batch_normalization_param = 5;
  if (has_batch_normalization_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *param_.batch_normalization_param_, output);
  }

  // .XZY_ConvolutionParam convolution_param = 6;
  if (has_convolution_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *param_.convolution_param_, output);
  }

  // .XZY_FullyConnectedParam fully_connected_param = 7;
  if (has_fully_connected_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *param_.fully_connected_param_, output);
  }

  // .XZY_MaxPoolingParam max_pooling_param = 8;
  if (has_max_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *param_.max_pooling_param_, output);
  }

  // .XZY_SeparableConvolutionParams separable_convolution_param = 9;
  if (has_separable_convolution_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *param_.separable_convolution_param_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XZY_Node)
}

::google::protobuf::uint8* XZY_Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XZY_Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XZY_Node.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string input_names = 2;
  for (int i = 0, n = this->input_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_names(i).data(), static_cast<int>(this->input_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XZY_Node.input_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->input_names(i), target);
  }

  // repeated .XZY_Shape input_shapes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_shapes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->input_shapes(static_cast<int>(i)), deterministic, target);
  }

  // .XZY_Shape output_shape = 4;
  if (this->has_output_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->output_shape_, deterministic, target);
  }

  // .XZY_BatchNormalizationParam batch_normalization_param = 5;
  if (has_batch_normalization_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *param_.batch_normalization_param_, deterministic, target);
  }

  // .XZY_ConvolutionParam convolution_param = 6;
  if (has_convolution_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *param_.convolution_param_, deterministic, target);
  }

  // .XZY_FullyConnectedParam fully_connected_param = 7;
  if (has_fully_connected_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *param_.fully_connected_param_, deterministic, target);
  }

  // .XZY_MaxPoolingParam max_pooling_param = 8;
  if (has_max_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *param_.max_pooling_param_, deterministic, target);
  }

  // .XZY_SeparableConvolutionParams separable_convolution_param = 9;
  if (has_separable_convolution_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *param_.separable_convolution_param_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XZY_Node)
  return target;
}

size_t XZY_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XZY_Node)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string input_names = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_names_size());
  for (int i = 0, n = this->input_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input_names(i));
  }

  // repeated .XZY_Shape input_shapes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->input_shapes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_shapes(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .XZY_Shape output_shape = 4;
  if (this->has_output_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->output_shape_);
  }

  switch (param_case()) {
    // .XZY_BatchNormalizationParam batch_normalization_param = 5;
    case kBatchNormalizationParam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *param_.batch_normalization_param_);
      break;
    }
    // .XZY_ConvolutionParam convolution_param = 6;
    case kConvolutionParam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *param_.convolution_param_);
      break;
    }
    // .XZY_FullyConnectedParam fully_connected_param = 7;
    case kFullyConnectedParam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *param_.fully_connected_param_);
      break;
    }
    // .XZY_MaxPoolingParam max_pooling_param = 8;
    case kMaxPoolingParam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *param_.max_pooling_param_);
      break;
    }
    // .XZY_SeparableConvolutionParams separable_convolution_param = 9;
    case kSeparableConvolutionParam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *param_.separable_convolution_param_);
      break;
    }
    case PARAM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XZY_Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XZY_Node)
  GOOGLE_DCHECK_NE(&from, this);
  const XZY_Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XZY_Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XZY_Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XZY_Node)
    MergeFrom(*source);
  }
}

void XZY_Node::MergeFrom(const XZY_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XZY_Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_names_.MergeFrom(from.input_names_);
  input_shapes_.MergeFrom(from.input_shapes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_output_shape()) {
    mutable_output_shape()->::XZY_Shape::MergeFrom(from.output_shape());
  }
  switch (from.param_case()) {
    case kBatchNormalizationParam: {
      mutable_batch_normalization_param()->::XZY_BatchNormalizationParam::MergeFrom(from.batch_normalization_param());
      break;
    }
    case kConvolutionParam: {
      mutable_convolution_param()->::XZY_ConvolutionParam::MergeFrom(from.convolution_param());
      break;
    }
    case kFullyConnectedParam: {
      mutable_fully_connected_param()->::XZY_FullyConnectedParam::MergeFrom(from.fully_connected_param());
      break;
    }
    case kMaxPoolingParam: {
      mutable_max_pooling_param()->::XZY_MaxPoolingParam::MergeFrom(from.max_pooling_param());
      break;
    }
    case kSeparableConvolutionParam: {
      mutable_separable_convolution_param()->::XZY_SeparableConvolutionParams::MergeFrom(from.separable_convolution_param());
      break;
    }
    case PARAM_NOT_SET: {
      break;
    }
  }
}

void XZY_Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XZY_Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XZY_Node::CopyFrom(const XZY_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XZY_Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XZY_Node::IsInitialized() const {
  return true;
}

void XZY_Node::Swap(XZY_Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XZY_Node::InternalSwap(XZY_Node* other) {
  using std::swap;
  input_names_.InternalSwap(&other->input_names_);
  input_shapes_.InternalSwap(&other->input_shapes_);
  name_.Swap(&other->name_);
  swap(output_shape_, other->output_shape_);
  swap(param_, other->param_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XZY_Node::GetMetadata() const {
  protobuf_node_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// XZY_Node

// string name = 1;
void XZY_Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& XZY_Node::name() const {
  // @@protoc_insertion_point(field_get:XZY_Node.name)
  return name_.GetNoArena();
}
void XZY_Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XZY_Node.name)
}
#if LANG_CXX11
void XZY_Node::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XZY_Node.name)
}
#endif
void XZY_Node::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XZY_Node.name)
}
void XZY_Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XZY_Node.name)
}
::std::string* XZY_Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:XZY_Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* XZY_Node::release_name() {
  // @@protoc_insertion_point(field_release:XZY_Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void XZY_Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.name)
}

// repeated string input_names = 2;
int XZY_Node::input_names_size() const {
  return input_names_.size();
}
void XZY_Node::clear_input_names() {
  input_names_.Clear();
}
const ::std::string& XZY_Node::input_names(int index) const {
  // @@protoc_insertion_point(field_get:XZY_Node.input_names)
  return input_names_.Get(index);
}
::std::string* XZY_Node::mutable_input_names(int index) {
  // @@protoc_insertion_point(field_mutable:XZY_Node.input_names)
  return input_names_.Mutable(index);
}
void XZY_Node::set_input_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:XZY_Node.input_names)
  input_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void XZY_Node::set_input_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:XZY_Node.input_names)
  input_names_.Mutable(index)->assign(std::move(value));
}
#endif
void XZY_Node::set_input_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:XZY_Node.input_names)
}
void XZY_Node::set_input_names(int index, const char* value, size_t size) {
  input_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:XZY_Node.input_names)
}
::std::string* XZY_Node::add_input_names() {
  // @@protoc_insertion_point(field_add_mutable:XZY_Node.input_names)
  return input_names_.Add();
}
void XZY_Node::add_input_names(const ::std::string& value) {
  input_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:XZY_Node.input_names)
}
#if LANG_CXX11
void XZY_Node::add_input_names(::std::string&& value) {
  input_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:XZY_Node.input_names)
}
#endif
void XZY_Node::add_input_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:XZY_Node.input_names)
}
void XZY_Node::add_input_names(const char* value, size_t size) {
  input_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:XZY_Node.input_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
XZY_Node::input_names() const {
  // @@protoc_insertion_point(field_list:XZY_Node.input_names)
  return input_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
XZY_Node::mutable_input_names() {
  // @@protoc_insertion_point(field_mutable_list:XZY_Node.input_names)
  return &input_names_;
}

// repeated .XZY_Shape input_shapes = 3;
int XZY_Node::input_shapes_size() const {
  return input_shapes_.size();
}
void XZY_Node::clear_input_shapes() {
  input_shapes_.Clear();
}
const ::XZY_Shape& XZY_Node::input_shapes(int index) const {
  // @@protoc_insertion_point(field_get:XZY_Node.input_shapes)
  return input_shapes_.Get(index);
}
::XZY_Shape* XZY_Node::mutable_input_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:XZY_Node.input_shapes)
  return input_shapes_.Mutable(index);
}
::XZY_Shape* XZY_Node::add_input_shapes() {
  // @@protoc_insertion_point(field_add:XZY_Node.input_shapes)
  return input_shapes_.Add();
}
::google::protobuf::RepeatedPtrField< ::XZY_Shape >*
XZY_Node::mutable_input_shapes() {
  // @@protoc_insertion_point(field_mutable_list:XZY_Node.input_shapes)
  return &input_shapes_;
}
const ::google::protobuf::RepeatedPtrField< ::XZY_Shape >&
XZY_Node::input_shapes() const {
  // @@protoc_insertion_point(field_list:XZY_Node.input_shapes)
  return input_shapes_;
}

// .XZY_Shape output_shape = 4;
bool XZY_Node::has_output_shape() const {
  return this != internal_default_instance() && output_shape_ != NULL;
}
void XZY_Node::clear_output_shape() {
  if (GetArenaNoVirtual() == NULL && output_shape_ != NULL) delete output_shape_;
  output_shape_ = NULL;
}
const ::XZY_Shape& XZY_Node::output_shape() const {
  const ::XZY_Shape* p = output_shape_;
  // @@protoc_insertion_point(field_get:XZY_Node.output_shape)
  return p != NULL ? *p : *reinterpret_cast<const ::XZY_Shape*>(
      &::_XZY_Shape_default_instance_);
}
::XZY_Shape* XZY_Node::mutable_output_shape() {
  
  if (output_shape_ == NULL) {
    output_shape_ = new ::XZY_Shape;
  }
  // @@protoc_insertion_point(field_mutable:XZY_Node.output_shape)
  return output_shape_;
}
::XZY_Shape* XZY_Node::release_output_shape() {
  // @@protoc_insertion_point(field_release:XZY_Node.output_shape)
  
  ::XZY_Shape* temp = output_shape_;
  output_shape_ = NULL;
  return temp;
}
void XZY_Node::set_allocated_output_shape(::XZY_Shape* output_shape) {
  delete output_shape_;
  output_shape_ = output_shape;
  if (output_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.output_shape)
}

// .XZY_BatchNormalizationParam batch_normalization_param = 5;
bool XZY_Node::has_batch_normalization_param() const {
  return param_case() == kBatchNormalizationParam;
}
void XZY_Node::set_has_batch_normalization_param() {
  _oneof_case_[0] = kBatchNormalizationParam;
}
void XZY_Node::clear_batch_normalization_param() {
  if (has_batch_normalization_param()) {
    delete param_.batch_normalization_param_;
    clear_has_param();
  }
}
 const ::XZY_BatchNormalizationParam& XZY_Node::batch_normalization_param() const {
  // @@protoc_insertion_point(field_get:XZY_Node.batch_normalization_param)
  return has_batch_normalization_param()
      ? *param_.batch_normalization_param_
      : ::XZY_BatchNormalizationParam::default_instance();
}
::XZY_BatchNormalizationParam* XZY_Node::mutable_batch_normalization_param() {
  if (!has_batch_normalization_param()) {
    clear_param();
    set_has_batch_normalization_param();
    param_.batch_normalization_param_ = new ::XZY_BatchNormalizationParam;
  }
  // @@protoc_insertion_point(field_mutable:XZY_Node.batch_normalization_param)
  return param_.batch_normalization_param_;
}
::XZY_BatchNormalizationParam* XZY_Node::release_batch_normalization_param() {
  // @@protoc_insertion_point(field_release:XZY_Node.batch_normalization_param)
  if (has_batch_normalization_param()) {
    clear_has_param();
    ::XZY_BatchNormalizationParam* temp = param_.batch_normalization_param_;
    param_.batch_normalization_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void XZY_Node::set_allocated_batch_normalization_param(::XZY_BatchNormalizationParam* batch_normalization_param) {
  clear_param();
  if (batch_normalization_param) {
    set_has_batch_normalization_param();
    param_.batch_normalization_param_ = batch_normalization_param;
  }
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.batch_normalization_param)
}

// .XZY_ConvolutionParam convolution_param = 6;
bool XZY_Node::has_convolution_param() const {
  return param_case() == kConvolutionParam;
}
void XZY_Node::set_has_convolution_param() {
  _oneof_case_[0] = kConvolutionParam;
}
void XZY_Node::clear_convolution_param() {
  if (has_convolution_param()) {
    delete param_.convolution_param_;
    clear_has_param();
  }
}
 const ::XZY_ConvolutionParam& XZY_Node::convolution_param() const {
  // @@protoc_insertion_point(field_get:XZY_Node.convolution_param)
  return has_convolution_param()
      ? *param_.convolution_param_
      : ::XZY_ConvolutionParam::default_instance();
}
::XZY_ConvolutionParam* XZY_Node::mutable_convolution_param() {
  if (!has_convolution_param()) {
    clear_param();
    set_has_convolution_param();
    param_.convolution_param_ = new ::XZY_ConvolutionParam;
  }
  // @@protoc_insertion_point(field_mutable:XZY_Node.convolution_param)
  return param_.convolution_param_;
}
::XZY_ConvolutionParam* XZY_Node::release_convolution_param() {
  // @@protoc_insertion_point(field_release:XZY_Node.convolution_param)
  if (has_convolution_param()) {
    clear_has_param();
    ::XZY_ConvolutionParam* temp = param_.convolution_param_;
    param_.convolution_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void XZY_Node::set_allocated_convolution_param(::XZY_ConvolutionParam* convolution_param) {
  clear_param();
  if (convolution_param) {
    set_has_convolution_param();
    param_.convolution_param_ = convolution_param;
  }
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.convolution_param)
}

// .XZY_FullyConnectedParam fully_connected_param = 7;
bool XZY_Node::has_fully_connected_param() const {
  return param_case() == kFullyConnectedParam;
}
void XZY_Node::set_has_fully_connected_param() {
  _oneof_case_[0] = kFullyConnectedParam;
}
void XZY_Node::clear_fully_connected_param() {
  if (has_fully_connected_param()) {
    delete param_.fully_connected_param_;
    clear_has_param();
  }
}
 const ::XZY_FullyConnectedParam& XZY_Node::fully_connected_param() const {
  // @@protoc_insertion_point(field_get:XZY_Node.fully_connected_param)
  return has_fully_connected_param()
      ? *param_.fully_connected_param_
      : ::XZY_FullyConnectedParam::default_instance();
}
::XZY_FullyConnectedParam* XZY_Node::mutable_fully_connected_param() {
  if (!has_fully_connected_param()) {
    clear_param();
    set_has_fully_connected_param();
    param_.fully_connected_param_ = new ::XZY_FullyConnectedParam;
  }
  // @@protoc_insertion_point(field_mutable:XZY_Node.fully_connected_param)
  return param_.fully_connected_param_;
}
::XZY_FullyConnectedParam* XZY_Node::release_fully_connected_param() {
  // @@protoc_insertion_point(field_release:XZY_Node.fully_connected_param)
  if (has_fully_connected_param()) {
    clear_has_param();
    ::XZY_FullyConnectedParam* temp = param_.fully_connected_param_;
    param_.fully_connected_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void XZY_Node::set_allocated_fully_connected_param(::XZY_FullyConnectedParam* fully_connected_param) {
  clear_param();
  if (fully_connected_param) {
    set_has_fully_connected_param();
    param_.fully_connected_param_ = fully_connected_param;
  }
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.fully_connected_param)
}

// .XZY_MaxPoolingParam max_pooling_param = 8;
bool XZY_Node::has_max_pooling_param() const {
  return param_case() == kMaxPoolingParam;
}
void XZY_Node::set_has_max_pooling_param() {
  _oneof_case_[0] = kMaxPoolingParam;
}
void XZY_Node::clear_max_pooling_param() {
  if (has_max_pooling_param()) {
    delete param_.max_pooling_param_;
    clear_has_param();
  }
}
 const ::XZY_MaxPoolingParam& XZY_Node::max_pooling_param() const {
  // @@protoc_insertion_point(field_get:XZY_Node.max_pooling_param)
  return has_max_pooling_param()
      ? *param_.max_pooling_param_
      : ::XZY_MaxPoolingParam::default_instance();
}
::XZY_MaxPoolingParam* XZY_Node::mutable_max_pooling_param() {
  if (!has_max_pooling_param()) {
    clear_param();
    set_has_max_pooling_param();
    param_.max_pooling_param_ = new ::XZY_MaxPoolingParam;
  }
  // @@protoc_insertion_point(field_mutable:XZY_Node.max_pooling_param)
  return param_.max_pooling_param_;
}
::XZY_MaxPoolingParam* XZY_Node::release_max_pooling_param() {
  // @@protoc_insertion_point(field_release:XZY_Node.max_pooling_param)
  if (has_max_pooling_param()) {
    clear_has_param();
    ::XZY_MaxPoolingParam* temp = param_.max_pooling_param_;
    param_.max_pooling_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void XZY_Node::set_allocated_max_pooling_param(::XZY_MaxPoolingParam* max_pooling_param) {
  clear_param();
  if (max_pooling_param) {
    set_has_max_pooling_param();
    param_.max_pooling_param_ = max_pooling_param;
  }
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.max_pooling_param)
}

// .XZY_SeparableConvolutionParams separable_convolution_param = 9;
bool XZY_Node::has_separable_convolution_param() const {
  return param_case() == kSeparableConvolutionParam;
}
void XZY_Node::set_has_separable_convolution_param() {
  _oneof_case_[0] = kSeparableConvolutionParam;
}
void XZY_Node::clear_separable_convolution_param() {
  if (has_separable_convolution_param()) {
    delete param_.separable_convolution_param_;
    clear_has_param();
  }
}
 const ::XZY_SeparableConvolutionParams& XZY_Node::separable_convolution_param() const {
  // @@protoc_insertion_point(field_get:XZY_Node.separable_convolution_param)
  return has_separable_convolution_param()
      ? *param_.separable_convolution_param_
      : ::XZY_SeparableConvolutionParams::default_instance();
}
::XZY_SeparableConvolutionParams* XZY_Node::mutable_separable_convolution_param() {
  if (!has_separable_convolution_param()) {
    clear_param();
    set_has_separable_convolution_param();
    param_.separable_convolution_param_ = new ::XZY_SeparableConvolutionParams;
  }
  // @@protoc_insertion_point(field_mutable:XZY_Node.separable_convolution_param)
  return param_.separable_convolution_param_;
}
::XZY_SeparableConvolutionParams* XZY_Node::release_separable_convolution_param() {
  // @@protoc_insertion_point(field_release:XZY_Node.separable_convolution_param)
  if (has_separable_convolution_param()) {
    clear_has_param();
    ::XZY_SeparableConvolutionParams* temp = param_.separable_convolution_param_;
    param_.separable_convolution_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void XZY_Node::set_allocated_separable_convolution_param(::XZY_SeparableConvolutionParams* separable_convolution_param) {
  clear_param();
  if (separable_convolution_param) {
    set_has_separable_convolution_param();
    param_.separable_convolution_param_ = separable_convolution_param;
  }
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.separable_convolution_param)
}

bool XZY_Node::has_param() const {
  return param_case() != PARAM_NOT_SET;
}
void XZY_Node::clear_has_param() {
  _oneof_case_[0] = PARAM_NOT_SET;
}
XZY_Node::ParamCase XZY_Node::param_case() const {
  return XZY_Node::ParamCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
