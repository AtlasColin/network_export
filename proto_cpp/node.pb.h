// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#ifndef PROTOBUF_node_2eproto__INCLUDED
#define PROTOBUF_node_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "shape.pb.h"
#include "batch_norm_param.pb.h"
#include "conv_param.pb.h"
#include "fully_connected_param.pb.h"
#include "max_pooling_param.pb.h"
#include "separable_convolution_param.pb.h"
// @@protoc_insertion_point(includes)
class XZY_Node;
class XZY_NodeDefaultTypeInternal;
extern XZY_NodeDefaultTypeInternal _XZY_Node_default_instance_;

namespace protobuf_node_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_node_2eproto

// ===================================================================

class XZY_Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XZY_Node) */ {
 public:
  XZY_Node();
  virtual ~XZY_Node();

  XZY_Node(const XZY_Node& from);

  inline XZY_Node& operator=(const XZY_Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XZY_Node(XZY_Node&& from) noexcept
    : XZY_Node() {
    *this = ::std::move(from);
  }

  inline XZY_Node& operator=(XZY_Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XZY_Node& default_instance();

  enum ParamCase {
    kBatchNormalizationParam = 5,
    kConvolutionParam = 6,
    kFullyConnectedParam = 7,
    kMaxPoolingParam = 8,
    kSeparableConvolutionParam = 9,
    PARAM_NOT_SET = 0,
  };

  static inline const XZY_Node* internal_default_instance() {
    return reinterpret_cast<const XZY_Node*>(
               &_XZY_Node_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(XZY_Node* other);
  friend void swap(XZY_Node& a, XZY_Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XZY_Node* New() const PROTOBUF_FINAL { return New(NULL); }

  XZY_Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XZY_Node& from);
  void MergeFrom(const XZY_Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XZY_Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string input_names = 2;
  int input_names_size() const;
  void clear_input_names();
  static const int kInputNamesFieldNumber = 2;
  const ::std::string& input_names(int index) const;
  ::std::string* mutable_input_names(int index);
  void set_input_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_input_names(int index, ::std::string&& value);
  #endif
  void set_input_names(int index, const char* value);
  void set_input_names(int index, const char* value, size_t size);
  ::std::string* add_input_names();
  void add_input_names(const ::std::string& value);
  #if LANG_CXX11
  void add_input_names(::std::string&& value);
  #endif
  void add_input_names(const char* value);
  void add_input_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input_names();

  // repeated .XZY_Shape input_shapes = 3;
  int input_shapes_size() const;
  void clear_input_shapes();
  static const int kInputShapesFieldNumber = 3;
  const ::XZY_Shape& input_shapes(int index) const;
  ::XZY_Shape* mutable_input_shapes(int index);
  ::XZY_Shape* add_input_shapes();
  ::google::protobuf::RepeatedPtrField< ::XZY_Shape >*
      mutable_input_shapes();
  const ::google::protobuf::RepeatedPtrField< ::XZY_Shape >&
      input_shapes() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .XZY_Shape output_shape = 4;
  bool has_output_shape() const;
  void clear_output_shape();
  static const int kOutputShapeFieldNumber = 4;
  const ::XZY_Shape& output_shape() const;
  ::XZY_Shape* mutable_output_shape();
  ::XZY_Shape* release_output_shape();
  void set_allocated_output_shape(::XZY_Shape* output_shape);

  // .XZY_BatchNormalizationParam batch_normalization_param = 5;
  bool has_batch_normalization_param() const;
  void clear_batch_normalization_param();
  static const int kBatchNormalizationParamFieldNumber = 5;
  const ::XZY_BatchNormalizationParam& batch_normalization_param() const;
  ::XZY_BatchNormalizationParam* mutable_batch_normalization_param();
  ::XZY_BatchNormalizationParam* release_batch_normalization_param();
  void set_allocated_batch_normalization_param(::XZY_BatchNormalizationParam* batch_normalization_param);

  // .XZY_ConvolutionParam convolution_param = 6;
  bool has_convolution_param() const;
  void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 6;
  const ::XZY_ConvolutionParam& convolution_param() const;
  ::XZY_ConvolutionParam* mutable_convolution_param();
  ::XZY_ConvolutionParam* release_convolution_param();
  void set_allocated_convolution_param(::XZY_ConvolutionParam* convolution_param);

  // .XZY_FullyConnectedParam fully_connected_param = 7;
  bool has_fully_connected_param() const;
  void clear_fully_connected_param();
  static const int kFullyConnectedParamFieldNumber = 7;
  const ::XZY_FullyConnectedParam& fully_connected_param() const;
  ::XZY_FullyConnectedParam* mutable_fully_connected_param();
  ::XZY_FullyConnectedParam* release_fully_connected_param();
  void set_allocated_fully_connected_param(::XZY_FullyConnectedParam* fully_connected_param);

  // .XZY_MaxPoolingParam max_pooling_param = 8;
  bool has_max_pooling_param() const;
  void clear_max_pooling_param();
  static const int kMaxPoolingParamFieldNumber = 8;
  const ::XZY_MaxPoolingParam& max_pooling_param() const;
  ::XZY_MaxPoolingParam* mutable_max_pooling_param();
  ::XZY_MaxPoolingParam* release_max_pooling_param();
  void set_allocated_max_pooling_param(::XZY_MaxPoolingParam* max_pooling_param);

  // .XZY_SeparableConvolutionParams separable_convolution_param = 9;
  bool has_separable_convolution_param() const;
  void clear_separable_convolution_param();
  static const int kSeparableConvolutionParamFieldNumber = 9;
  const ::XZY_SeparableConvolutionParams& separable_convolution_param() const;
  ::XZY_SeparableConvolutionParams* mutable_separable_convolution_param();
  ::XZY_SeparableConvolutionParams* release_separable_convolution_param();
  void set_allocated_separable_convolution_param(::XZY_SeparableConvolutionParams* separable_convolution_param);

  ParamCase param_case() const;
  // @@protoc_insertion_point(class_scope:XZY_Node)
 private:
  void set_has_batch_normalization_param();
  void set_has_convolution_param();
  void set_has_fully_connected_param();
  void set_has_max_pooling_param();
  void set_has_separable_convolution_param();

  inline bool has_param() const;
  void clear_param();
  inline void clear_has_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_names_;
  ::google::protobuf::RepeatedPtrField< ::XZY_Shape > input_shapes_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::XZY_Shape* output_shape_;
  union ParamUnion {
    ParamUnion() {}
    ::XZY_BatchNormalizationParam* batch_normalization_param_;
    ::XZY_ConvolutionParam* convolution_param_;
    ::XZY_FullyConnectedParam* fully_connected_param_;
    ::XZY_MaxPoolingParam* max_pooling_param_;
    ::XZY_SeparableConvolutionParams* separable_convolution_param_;
  } param_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_node_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XZY_Node

// string name = 1;
inline void XZY_Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XZY_Node::name() const {
  // @@protoc_insertion_point(field_get:XZY_Node.name)
  return name_.GetNoArena();
}
inline void XZY_Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XZY_Node.name)
}
#if LANG_CXX11
inline void XZY_Node::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XZY_Node.name)
}
#endif
inline void XZY_Node::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XZY_Node.name)
}
inline void XZY_Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XZY_Node.name)
}
inline ::std::string* XZY_Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:XZY_Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XZY_Node::release_name() {
  // @@protoc_insertion_point(field_release:XZY_Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XZY_Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.name)
}

// repeated string input_names = 2;
inline int XZY_Node::input_names_size() const {
  return input_names_.size();
}
inline void XZY_Node::clear_input_names() {
  input_names_.Clear();
}
inline const ::std::string& XZY_Node::input_names(int index) const {
  // @@protoc_insertion_point(field_get:XZY_Node.input_names)
  return input_names_.Get(index);
}
inline ::std::string* XZY_Node::mutable_input_names(int index) {
  // @@protoc_insertion_point(field_mutable:XZY_Node.input_names)
  return input_names_.Mutable(index);
}
inline void XZY_Node::set_input_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:XZY_Node.input_names)
  input_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void XZY_Node::set_input_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:XZY_Node.input_names)
  input_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void XZY_Node::set_input_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:XZY_Node.input_names)
}
inline void XZY_Node::set_input_names(int index, const char* value, size_t size) {
  input_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:XZY_Node.input_names)
}
inline ::std::string* XZY_Node::add_input_names() {
  // @@protoc_insertion_point(field_add_mutable:XZY_Node.input_names)
  return input_names_.Add();
}
inline void XZY_Node::add_input_names(const ::std::string& value) {
  input_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:XZY_Node.input_names)
}
#if LANG_CXX11
inline void XZY_Node::add_input_names(::std::string&& value) {
  input_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:XZY_Node.input_names)
}
#endif
inline void XZY_Node::add_input_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:XZY_Node.input_names)
}
inline void XZY_Node::add_input_names(const char* value, size_t size) {
  input_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:XZY_Node.input_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
XZY_Node::input_names() const {
  // @@protoc_insertion_point(field_list:XZY_Node.input_names)
  return input_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
XZY_Node::mutable_input_names() {
  // @@protoc_insertion_point(field_mutable_list:XZY_Node.input_names)
  return &input_names_;
}

// repeated .XZY_Shape input_shapes = 3;
inline int XZY_Node::input_shapes_size() const {
  return input_shapes_.size();
}
inline void XZY_Node::clear_input_shapes() {
  input_shapes_.Clear();
}
inline const ::XZY_Shape& XZY_Node::input_shapes(int index) const {
  // @@protoc_insertion_point(field_get:XZY_Node.input_shapes)
  return input_shapes_.Get(index);
}
inline ::XZY_Shape* XZY_Node::mutable_input_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:XZY_Node.input_shapes)
  return input_shapes_.Mutable(index);
}
inline ::XZY_Shape* XZY_Node::add_input_shapes() {
  // @@protoc_insertion_point(field_add:XZY_Node.input_shapes)
  return input_shapes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XZY_Shape >*
XZY_Node::mutable_input_shapes() {
  // @@protoc_insertion_point(field_mutable_list:XZY_Node.input_shapes)
  return &input_shapes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XZY_Shape >&
XZY_Node::input_shapes() const {
  // @@protoc_insertion_point(field_list:XZY_Node.input_shapes)
  return input_shapes_;
}

// .XZY_Shape output_shape = 4;
inline bool XZY_Node::has_output_shape() const {
  return this != internal_default_instance() && output_shape_ != NULL;
}
inline void XZY_Node::clear_output_shape() {
  if (GetArenaNoVirtual() == NULL && output_shape_ != NULL) delete output_shape_;
  output_shape_ = NULL;
}
inline const ::XZY_Shape& XZY_Node::output_shape() const {
  const ::XZY_Shape* p = output_shape_;
  // @@protoc_insertion_point(field_get:XZY_Node.output_shape)
  return p != NULL ? *p : *reinterpret_cast<const ::XZY_Shape*>(
      &::_XZY_Shape_default_instance_);
}
inline ::XZY_Shape* XZY_Node::mutable_output_shape() {
  
  if (output_shape_ == NULL) {
    output_shape_ = new ::XZY_Shape;
  }
  // @@protoc_insertion_point(field_mutable:XZY_Node.output_shape)
  return output_shape_;
}
inline ::XZY_Shape* XZY_Node::release_output_shape() {
  // @@protoc_insertion_point(field_release:XZY_Node.output_shape)
  
  ::XZY_Shape* temp = output_shape_;
  output_shape_ = NULL;
  return temp;
}
inline void XZY_Node::set_allocated_output_shape(::XZY_Shape* output_shape) {
  delete output_shape_;
  output_shape_ = output_shape;
  if (output_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.output_shape)
}

// .XZY_BatchNormalizationParam batch_normalization_param = 5;
inline bool XZY_Node::has_batch_normalization_param() const {
  return param_case() == kBatchNormalizationParam;
}
inline void XZY_Node::set_has_batch_normalization_param() {
  _oneof_case_[0] = kBatchNormalizationParam;
}
inline void XZY_Node::clear_batch_normalization_param() {
  if (has_batch_normalization_param()) {
    delete param_.batch_normalization_param_;
    clear_has_param();
  }
}
inline  const ::XZY_BatchNormalizationParam& XZY_Node::batch_normalization_param() const {
  // @@protoc_insertion_point(field_get:XZY_Node.batch_normalization_param)
  return has_batch_normalization_param()
      ? *param_.batch_normalization_param_
      : ::XZY_BatchNormalizationParam::default_instance();
}
inline ::XZY_BatchNormalizationParam* XZY_Node::mutable_batch_normalization_param() {
  if (!has_batch_normalization_param()) {
    clear_param();
    set_has_batch_normalization_param();
    param_.batch_normalization_param_ = new ::XZY_BatchNormalizationParam;
  }
  // @@protoc_insertion_point(field_mutable:XZY_Node.batch_normalization_param)
  return param_.batch_normalization_param_;
}
inline ::XZY_BatchNormalizationParam* XZY_Node::release_batch_normalization_param() {
  // @@protoc_insertion_point(field_release:XZY_Node.batch_normalization_param)
  if (has_batch_normalization_param()) {
    clear_has_param();
    ::XZY_BatchNormalizationParam* temp = param_.batch_normalization_param_;
    param_.batch_normalization_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void XZY_Node::set_allocated_batch_normalization_param(::XZY_BatchNormalizationParam* batch_normalization_param) {
  clear_param();
  if (batch_normalization_param) {
    set_has_batch_normalization_param();
    param_.batch_normalization_param_ = batch_normalization_param;
  }
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.batch_normalization_param)
}

// .XZY_ConvolutionParam convolution_param = 6;
inline bool XZY_Node::has_convolution_param() const {
  return param_case() == kConvolutionParam;
}
inline void XZY_Node::set_has_convolution_param() {
  _oneof_case_[0] = kConvolutionParam;
}
inline void XZY_Node::clear_convolution_param() {
  if (has_convolution_param()) {
    delete param_.convolution_param_;
    clear_has_param();
  }
}
inline  const ::XZY_ConvolutionParam& XZY_Node::convolution_param() const {
  // @@protoc_insertion_point(field_get:XZY_Node.convolution_param)
  return has_convolution_param()
      ? *param_.convolution_param_
      : ::XZY_ConvolutionParam::default_instance();
}
inline ::XZY_ConvolutionParam* XZY_Node::mutable_convolution_param() {
  if (!has_convolution_param()) {
    clear_param();
    set_has_convolution_param();
    param_.convolution_param_ = new ::XZY_ConvolutionParam;
  }
  // @@protoc_insertion_point(field_mutable:XZY_Node.convolution_param)
  return param_.convolution_param_;
}
inline ::XZY_ConvolutionParam* XZY_Node::release_convolution_param() {
  // @@protoc_insertion_point(field_release:XZY_Node.convolution_param)
  if (has_convolution_param()) {
    clear_has_param();
    ::XZY_ConvolutionParam* temp = param_.convolution_param_;
    param_.convolution_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void XZY_Node::set_allocated_convolution_param(::XZY_ConvolutionParam* convolution_param) {
  clear_param();
  if (convolution_param) {
    set_has_convolution_param();
    param_.convolution_param_ = convolution_param;
  }
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.convolution_param)
}

// .XZY_FullyConnectedParam fully_connected_param = 7;
inline bool XZY_Node::has_fully_connected_param() const {
  return param_case() == kFullyConnectedParam;
}
inline void XZY_Node::set_has_fully_connected_param() {
  _oneof_case_[0] = kFullyConnectedParam;
}
inline void XZY_Node::clear_fully_connected_param() {
  if (has_fully_connected_param()) {
    delete param_.fully_connected_param_;
    clear_has_param();
  }
}
inline  const ::XZY_FullyConnectedParam& XZY_Node::fully_connected_param() const {
  // @@protoc_insertion_point(field_get:XZY_Node.fully_connected_param)
  return has_fully_connected_param()
      ? *param_.fully_connected_param_
      : ::XZY_FullyConnectedParam::default_instance();
}
inline ::XZY_FullyConnectedParam* XZY_Node::mutable_fully_connected_param() {
  if (!has_fully_connected_param()) {
    clear_param();
    set_has_fully_connected_param();
    param_.fully_connected_param_ = new ::XZY_FullyConnectedParam;
  }
  // @@protoc_insertion_point(field_mutable:XZY_Node.fully_connected_param)
  return param_.fully_connected_param_;
}
inline ::XZY_FullyConnectedParam* XZY_Node::release_fully_connected_param() {
  // @@protoc_insertion_point(field_release:XZY_Node.fully_connected_param)
  if (has_fully_connected_param()) {
    clear_has_param();
    ::XZY_FullyConnectedParam* temp = param_.fully_connected_param_;
    param_.fully_connected_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void XZY_Node::set_allocated_fully_connected_param(::XZY_FullyConnectedParam* fully_connected_param) {
  clear_param();
  if (fully_connected_param) {
    set_has_fully_connected_param();
    param_.fully_connected_param_ = fully_connected_param;
  }
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.fully_connected_param)
}

// .XZY_MaxPoolingParam max_pooling_param = 8;
inline bool XZY_Node::has_max_pooling_param() const {
  return param_case() == kMaxPoolingParam;
}
inline void XZY_Node::set_has_max_pooling_param() {
  _oneof_case_[0] = kMaxPoolingParam;
}
inline void XZY_Node::clear_max_pooling_param() {
  if (has_max_pooling_param()) {
    delete param_.max_pooling_param_;
    clear_has_param();
  }
}
inline  const ::XZY_MaxPoolingParam& XZY_Node::max_pooling_param() const {
  // @@protoc_insertion_point(field_get:XZY_Node.max_pooling_param)
  return has_max_pooling_param()
      ? *param_.max_pooling_param_
      : ::XZY_MaxPoolingParam::default_instance();
}
inline ::XZY_MaxPoolingParam* XZY_Node::mutable_max_pooling_param() {
  if (!has_max_pooling_param()) {
    clear_param();
    set_has_max_pooling_param();
    param_.max_pooling_param_ = new ::XZY_MaxPoolingParam;
  }
  // @@protoc_insertion_point(field_mutable:XZY_Node.max_pooling_param)
  return param_.max_pooling_param_;
}
inline ::XZY_MaxPoolingParam* XZY_Node::release_max_pooling_param() {
  // @@protoc_insertion_point(field_release:XZY_Node.max_pooling_param)
  if (has_max_pooling_param()) {
    clear_has_param();
    ::XZY_MaxPoolingParam* temp = param_.max_pooling_param_;
    param_.max_pooling_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void XZY_Node::set_allocated_max_pooling_param(::XZY_MaxPoolingParam* max_pooling_param) {
  clear_param();
  if (max_pooling_param) {
    set_has_max_pooling_param();
    param_.max_pooling_param_ = max_pooling_param;
  }
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.max_pooling_param)
}

// .XZY_SeparableConvolutionParams separable_convolution_param = 9;
inline bool XZY_Node::has_separable_convolution_param() const {
  return param_case() == kSeparableConvolutionParam;
}
inline void XZY_Node::set_has_separable_convolution_param() {
  _oneof_case_[0] = kSeparableConvolutionParam;
}
inline void XZY_Node::clear_separable_convolution_param() {
  if (has_separable_convolution_param()) {
    delete param_.separable_convolution_param_;
    clear_has_param();
  }
}
inline  const ::XZY_SeparableConvolutionParams& XZY_Node::separable_convolution_param() const {
  // @@protoc_insertion_point(field_get:XZY_Node.separable_convolution_param)
  return has_separable_convolution_param()
      ? *param_.separable_convolution_param_
      : ::XZY_SeparableConvolutionParams::default_instance();
}
inline ::XZY_SeparableConvolutionParams* XZY_Node::mutable_separable_convolution_param() {
  if (!has_separable_convolution_param()) {
    clear_param();
    set_has_separable_convolution_param();
    param_.separable_convolution_param_ = new ::XZY_SeparableConvolutionParams;
  }
  // @@protoc_insertion_point(field_mutable:XZY_Node.separable_convolution_param)
  return param_.separable_convolution_param_;
}
inline ::XZY_SeparableConvolutionParams* XZY_Node::release_separable_convolution_param() {
  // @@protoc_insertion_point(field_release:XZY_Node.separable_convolution_param)
  if (has_separable_convolution_param()) {
    clear_has_param();
    ::XZY_SeparableConvolutionParams* temp = param_.separable_convolution_param_;
    param_.separable_convolution_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void XZY_Node::set_allocated_separable_convolution_param(::XZY_SeparableConvolutionParams* separable_convolution_param) {
  clear_param();
  if (separable_convolution_param) {
    set_has_separable_convolution_param();
    param_.separable_convolution_param_ = separable_convolution_param;
  }
  // @@protoc_insertion_point(field_set_allocated:XZY_Node.separable_convolution_param)
}

inline bool XZY_Node::has_param() const {
  return param_case() != PARAM_NOT_SET;
}
inline void XZY_Node::clear_has_param() {
  _oneof_case_[0] = PARAM_NOT_SET;
}
inline XZY_Node::ParamCase XZY_Node::param_case() const {
  return XZY_Node::ParamCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_node_2eproto__INCLUDED
